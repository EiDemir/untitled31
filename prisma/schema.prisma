generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  orders          Order[]
  wishlist        Product[]  @relation(fields: [wishlistIDs], references: [id])
  wishlistIDs     String[]   @db.ObjectId
  cart            CartItem[]
  reviews         Review[]
  billingAddress  Json?
  shippingAddress Json?
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId String         @db.ObjectId
  price      Float
  quantity   Int
  images     String[]
  colors     ProductColor[]
  sizes      String[]
  users      User[]         @relation(fields: [userIDs], references: [id])
  userIDs    String[]       @db.ObjectId
  cartItems  CartItem[]
  reviews    Review[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  color     String?
  size      String?

  @@unique([userId, productId, color, size])
}

model Review {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  product    Product?   @relation(fields: [productId], references: [id])
  productId  String?    @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.ObjectId
  reviewText String
  date       DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  rating     Float
  voteCount  Int        @default(0)
  usersVoted UserVote[]
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

type UserVote {
  userID String
  vote   String
}

type ProductColor {
  name         String
  hexColorCode String
}

model Color {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  hexColorCode String @unique
}
